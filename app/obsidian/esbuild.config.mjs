import obPlugin from "@aidenlx/esbuild-plugin-obsidian";
import { build } from "esbuild";
import { lessLoader } from "esbuild-plugin-less";
import { readFile } from "fs/promises";
// import myPackage from "./package.json" assert { type: "json" };
import semverPrerelease from "semver/functions/prerelease.js";

const myPackage = JSON.parse(await readFile("./package.json"));
const isPreRelease = semverPrerelease(myPackage.version) !== null;

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const isProd = process.env.BUILD === "production";

/** @type import("esbuild").BuildOptions */
const opts = {
  bundle: true,
  watch: !isProd,
  platform: "node",
  logLevel: process.env.BUILD === "development" ? "info" : "silent",
  external: [
    "obsidian",
    "electron",
    "@electron/remote",
    "@codemirror/autocomplete",
    "@codemirror/state",
  ],
  format: "cjs",
  mainFields: ["browser", "module", "main"],
  sourcemap: isProd ? false : "inline",
  minify: isProd,
  loader: {
    ".svg": "text",
  },
  define: {
    "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
  },
};
try {
  await build({
    ...opts,
    entryPoints: ["src/zt-main.ts"],
    banner: { js: banner },
    outfile: "build/main.js",
    plugins: [lessLoader(), obPlugin({ beta: isPreRelease })],
  });
} catch (err) {
  console.error(err);
  process.exit(1);
}

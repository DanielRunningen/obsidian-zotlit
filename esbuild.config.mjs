import obPlugin from "@aidenlx/esbuild-plugin-obsidian";
import builtins from "builtin-modules";
import { build } from "esbuild";
import { lessLoader } from "esbuild-plugin-less";
import escape from "escape-string-regexp";
import { promises } from "fs";

import inlineWorker from "./scripts/inline-worker.mjs";
import { getConfigDirCode, libName } from "./src/const.js";
const { readFile } = promises;

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source visit the plugins github repository
*/
`;

const getPatchedBindingCode = () => `
try {
  var path = require("path").join(${getConfigDirCode},"${libName}"),
    binding = require(path);
  binding.path = path;
  return binding;
} catch (err) {
  throw err;
}
`;

/**
 * Patch the binding code to point module to the correct path
 * @param {boolean} worker in worker mode, skip the install guide
 * @returns {import("esbuild").Plugin}
 */
const patchBindings = () => ({
  name: "patch-bindings",
  setup: (build) =>
    build.onLoad(
      { filter: /node_modules\/bindings\/bindings\.js$/ },
      async (args) => ({
        contents: (await readFile(args.path, "utf8")).replace(
          `// Get the module root`,
          getPatchedBindingCode(),
        ),
      }),
    ),
});

const isProd = process.env.BUILD === "production";

/** @type import("esbuild").BuildOptions */
const opts = {
  bundle: true,
  watch: !isProd,
  platform: "browser",
  external: ["obsidian", "electron", "@electron/remote", ...builtins],
  format: "cjs",
  mainFields: ["browser", "module", "main"],
  sourcemap: isProd ? false : "inline",
  minify: isProd,
  define: {
    "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
  },
  loader: {
    ".sql": "text",
  },
};
try {
  const main = await build({
    ...opts,
    entryPoints: ["src/obsidian/zt-main.ts"],
    banner: { js: banner },
    outfile: "build/main.js",
    tsconfig: "src/obsidian/tsconfig.json",
    incremental: true,
    plugins: [
      lessLoader(),
      inlineWorker(
        {
          ...opts,
          watch: !isProd
            ? {
                onRebuild: (error) => {
                  if (error) console.error("watch build failed:", error);
                  else main.rebuild();
                },
              }
            : false,
          tsconfig: "src/db-worker/tsconfig.json",
          external: [...builtins],
          plugins: [patchBindings(true)],
          format: "cjs",
        },
        // replace code with determined path arg passed to worker
        [[new RegExp(escape(getConfigDirCode), "g"), 0]],
      ),
      obPlugin(),
    ],
  });
} catch (err) {
  console.error(err);
  process.exit(1);
}

/* eslint-disable @typescript-eslint/naming-convention */
import { writeFile } from "fs/promises";
import { join, resolve } from "path";
import makeKnex from "@aidenlx/knex";
import sqlts from "@rmp135/sql-ts";
import endent from "endent";

const dbPath = resolve(process.env.DB_PATH);

(async () => {
  const bsqlite3 = await (
    await import.meta.resolve("@aidenlx/better-sqlite3")
  ).replace(/^file:\/\//, "");
  const knex = makeKnex({
    client: "better-sqlite3",
    connection: {
      filename: `file:${dbPath}?mode=ro&immutable=1`,
      nativeBinding: join(bsqlite3, "../../build/Release/better_sqlite3.node"),
      readonly: true,
    },
    useNullAsDefault: true,
    // debug: true,
    pool: { min: 1, max: 1 },
  });

  const config = {
    interfaceNameFormat: "${table}",
    tableNameCasing: "pascal",
    typeMap: {
      string: ["timestamp"],
    },
    typeOverrides: {
      "main.deletedCollections.dateDeleted": "string",
      "main.deletedItems.dateDeleted": "string",
      "main.deletedSearches.dateDeleted": "string",
      "main.itemData.valueID": "number",
      "main.itemDataValues.value": "unknown",
      "main.syncedSettings.value": "unknown",
      "main.settings.value": "unknown",
      "main.savedSearchConditions.required": "unknown",
      "main.libraries.type": "LibraryType",
      "main.itemAnnotations.type": "AnnotationType",
      "main.itemAnnotations.isExternal": "BooleanInt",
      "main.itemTags.type": "BooleanInt",
    },
    excludedTables: ["main.dbDebug1"],
    // globalOptionality: "required",
  };
  const definitions = await sqlts.toObject(config, knex);
  knex.destroy();
  let tsString = sqlts.fromObject(definitions, config);
  tsString = endent.default`
    import type { AnnotationType } from "@obzt/zotero-type";
    type LibraryType = "user" | "group";
    type BooleanInt = 0 | 1;
    ${tsString}
  `;
  await writeFile("src/db-types.ts", tsString);
  await writeFile(
    "src/knex.d.ts",
    endent.default`
      // Generated by scripts/sql-type.mjs
      // Rerun \`pnpm db-type\` to regenerate this file.
      import * as DB from "./db-types.js";
      declare module "@aidenlx/knex/types/tables" {
        interface Tables {
          ${definitions.tables
            .map(
              ({ name, interfaceName }) =>
                `${name}: Required<DB.${interfaceName}>;`,
            )
            .join("\n")}
        }
      }
  `,
  );
})();
